Spinlocks

Spinlocks are locks which spin on mutexes. Spinning refers to continuously polling until a condition has been met.
 In the case of spinlocks, if a thread cannot obtain the mutex, 
it will keep polling the lock until it is free. 
The advantage of a spinlock is that the thread is kept active and does not enter a sleep-wait for a mutex to become available, 
thus can perform better in certain cases than typical blocking-sleep-wait style mutexes. 
Mutexes which are heavily contended are poor candidates for spinlocks.

Spinlocks should be avoided in uniprocessor contexts. Why is this?
Semaphores

Semaphores are another type of synchronization primitive that come in two flavors: binary and counting. Binary semaphores act much like simple mutexes, while counting semaphores can behave as recursive mutexes. Counting semaphores can be initialized to any arbitrary value which should depend on how many resources you have available for that particular shared data. Many threads can obtain the lock simultaneously until the limit is reached. This is referred to as lock depth.

Semaphores are more common in multiprocess programming (i.e. it's usually used as a synch primitive between processes). 
